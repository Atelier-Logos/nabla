  name: Push the Docker image to AWS ECR Repo
  on:
    push:
      branches:
        - main
        - dev
        - feature/*
  permissions:
    contents: read

  jobs:
    Build:
      name: Build
      runs-on: ubuntu-latest
      steps:
        - name: Harden the runner (Audit all outbound calls)
          uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
          with:
            egress-policy: audit

        - name: Checkout
          uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2.7.0
          with:
            submodules: recursive
            token: ${{ secrets.PAT_TOKEN }}

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

        - name: Get commit hash
          id: get-commit-hash
          run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"
        - name: Get timestamp
          id: get-timestamp
          run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"

        - name: Build, tag, and push the image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
            IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
            PORT: ${{ secrets.PORT }}
            LICENSE_SIGNING_KEY: ${{ secrets.LICENSE_SIGNING_KEY }}
          run: |
            # Build and tag both with unique tag and 'latest'
            docker build \
            --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
            --build-arg LICENSE_SIGNING_KEY=${{ secrets.LICENSE_SIGNING_KEY }} \
            --build-arg FIPS_MODE=true \
            --build-arg FIPS_VALIDATION=true \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

            # Push both tags
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
            
            # Note: FIPS mode is controlled via build args and can be overridden at runtime
            # Example: docker run -e FIPS_MODE=false -e FIPS_VALIDATION=false $ECR_REGISTRY/$ECR_REPOSITORY:latest